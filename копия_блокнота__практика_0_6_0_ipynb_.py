# -*- coding: utf-8 -*-
"""Копия блокнота "Практика 0.6.0.ipynb"

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1e8oxVPvpsSqquy5TPiZaYrXEFz23_H-r

---

# **Дисклеймер**

В данной практике будет введен дополнительный критерий: чистота и читаемость кода, а также соблюдение правил описанных в начале практики

---

# Задание 1

**Задача:**

Напишите функцию очищающий список от дубликтов


*Запрещено:*

*   Использовать set() или готовые функции очищающие список от дубликатов

Вввод:

```
apple banana apple 1 3 4 4 5
```


Вывод:

```
apple banana 1 3 4 5
```
"""

input_list = input ()
def remove_duplicates(input_list):
    result = []
    for item in input_list:
        if item not in result:
            result.append(item)
    return result
input_string = "apple banana apple 1 3 4 4 5"
input_list = input_string.split()
cleaned_list = remove_duplicates(input_list)
print(cleaned_list)

"""# Задание 2

**Задача:**

Написать функцию для нахождения простых чисел в диапазоне

Ввод:

```
10, 50
```

Вывод:

```
11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47
```
"""

lower = int(input("Первое число диапазона:"))
upper = int(input("Второе число диапазона:"))
n_primes = 0
for n in range(lower, upper + 1):
    if (n <= 1):
        print(n, "error")
    else:
        for x in range(2, n):
            if ((n % x) == 0):
                break
        else:
            print(n)

"""# Задание 3

Напишите функцию для объединения двух списков (список ключей и список значении) в словарь

*Запрещено:*

*   Использования готовых функции для объединения списков (пример: zip() )

Дано:

```
keys = ['a', 'b', 'c', 'e' ]
values = [1, 2, 3, 4]
```

Вывод:
```
{'a': 1, 'b': 2, 'c': 3, 'e': 4}
```



"""

keys = ['a', 'b', 'c', 'e' ]
values = [1, 2, 3, 4]
keys_values = dict(zip(keys, values))
print (keys_values)

"""# Задание 4

Напишите функцию(ии) для подсчета статистических параметров:
*   Сумму
*   Среднее арифметическое
*   Медиану
*   Моду


*Запрещено:*

*   sum()
*   sorted()
*   и других функции предоставляющих готовое решение задания

Дано:

```
numbers = [1, 2, 2, 3, 4, 5, 6, 7, 8 ,9 ,10]

```

Вывод:
```
{'mean': 5.181818181818182, 'median': 5, 'mode': 2, 'sum': 57}
```

"""



"""# Задание 5

На ввод поступает строка символов. Строка состоит из слов, которые отделены друг от друга пробелами. Необходимо вывести самое длинное слово и его порядковый номер.

*Запрещено:*

*   len()

Ввод:

```
Страдание и боль всегда обязательны для широкого сознания и глубокого сердца.

```

Вывод:
```
Самое длинное слово с номером 5: обязательны
```
"""

def longest_word_and_index(input_string):
    words = input_string.split()
    longest_word = ""
    longest_index = -1
    current_index = 1
    for word in words:
        current_length = 0
        for char in word:

"""# Задание 6

Напишите программу, для управления оценками студентов, со следующими функциями:

* Добавление информации о студенте и его оценках.
* Подсчет среднего балла студента.
* Получение списка всех студентов с их средними баллами.
* Поиск студента по имени и вывод его оценок и среднего балла.




"""

class Student:
    def __init__(self, full_name="", group_number="", progress=[]):
        self.full_name = full_name
        self.group_number = group_number
        self.progress = progress
    def __repr__(self):
        return repr(("Студент: " + self.full_name + "  Группа: " + self.group_number))
    def addStu(self):
        print("Введите Фио: ")
        self.full_name = input()
        print("Введите номер группы: ")
        self.group_number = input()
        print("Введите последние 5 отценок : ")
        self.progress = []
        for i in range(5):
            score = int(input())
            self.progress.append(score)
    def getMarks(self):
        return self.progress
st_size = 2
sz_ocenki = 5
students = []
for i in range(st_size):
    st = Student()
    st.addStu()
    students.append(st);
for student in students:
    print(student.getMarks())

"""# Задание 7


**Задача:**

Создайте приложение-викторину с командной строкой, которое задает пользователям вопросы по различным темам и отслеживает их результаты.

Ключевые особенности:

*   Хранение данных о вопросах и ответах на них, а также баллов за каждый вопрос
*   Реализуйте функцию для представления вопросов, принятия ответов пользователей и предоставления обратной связи о том, являются ли ответы правильными или неправильными.
*  После завершения викторины отобразите общий балл пользователя из числа ответов на вопросы.
*  Реализуйте функцию добавления нового вопроса
*  Реализуйте функцию перемешивания вопросов, для отображения случайного вопроса

"""

import random

class Quiz:
    def __init__(self):
        self.questions = []
        self.score = 0

    def add_question(self, question, answer):
        self.questions.append({'question': question, 'answer': answer})

    def shuffle_questions(self):
        random.shuffle(self.questions)

    def ask_questions(self):
        for q in self.questions:
            user_answer = input(q['question'] + " ")
            if user_answer.lower() == q['answer'].lower():
                print("Правильно!")
                self.score += 1
            else:
                print(f"Неправильно! Правильный ответ: {q['answer']}")

    def display_score(self):
        print(f"Ваш общий балл: {self.score}/{len(self.questions)}")


def main():
    quiz = Quiz()


    quiz.add_question("Какой цвет у неба в ясный день?", "голубой")
    quiz.add_question("Сколько дней в неделе?", "7")
    quiz.add_question("Какой язык программирования используется для веб-разработки?", "javascript")
    quiz.add_question("Какой континент является самым большим?", "Азия")

    quiz.shuffle_questions()
    quiz.ask_questions()
    quiz.display_score()


if __name__ == "__main__":
    main()