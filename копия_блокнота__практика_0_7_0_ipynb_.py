# -*- coding: utf-8 -*-
"""Копия блокнота "Практика 0.7.0.ipynb"

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FIGIusrbXHiLLsZEzlT-9S6li9M23iNa

Ссылка на материалы:  [пдф тут](https://drive.google.com/file/d/16Cm2tgrpuDH8eIdxdSYyOsfDPqnJ3byd/view?usp=sharing)

ФИО:
"""

Смирнова Яна Александровна

"""## Задание 1. HTTP-запросы, ответы и погода

Описание:

Напишите HTTP-запрос для получения информации о погоде в введенном городе из API.

Можно использовать API: https://open-meteo.com/. Используйте метод GET.


Ввод
```
56.50, 60.35
```

Вывод
```
Сегодня (1.11) погода 20 ◦С, нет осадков, туман
```
"""

pip install requests

import requests

def send_requests(url):
      response = requests.get(url)
      status_code = response.status_code
      if response.status_code == 200:
        return response.json()

def main(params):
  url = f'https://api.open-meteo.com/v1/forecast?latitude={params[0]}&longitude={params[1]}&current=temperature_2m,is_day,precipitation,rain,weather_code&timezone=Europe%2FMoscow&forecast_days=1'
  print(send_requests(url))


params = input('Введите координаты:').split(', ');
main(params)

def clear_data(data):
    current = datetime.today().date()
    current = f'{current_date.day}.{current_date.month}'
    temperature = data['current']['temperature_2m']
    temperature_format = data['current_units']['temperature_2m']

    weather_code = data['current']['weather_code']

    if weather_code == 2:
        weather = 'нет осадков, ясно'
    elif weather_code in [45, 48]:
        weather = 'нет осадков, туман'
    else:
        weather = 'дождик'
message = f'Сегодня ({current_date}) погода {temperature} {temperature_format},{weather}'

return message

"""## Задание 2. HTTP-запросы, ответы и покемоны

**Описание:**


Создайте код программы, которая будет взаимодействовать с API, со следующим функионалом:

1. Используя метод GET, отправьте запрос на endpoint /pokemon, чтобы получить список первых 20 покемонов

2. Извлеките имена покемонов из ответа и выведите их списком

3. Введите с помощью input() название одного из покемонов


```
Имя покемона: clefairy
```



4. Отправьте GET-запрос, чтобы получить полную информацию о выбранном покемоне

5. Извлеките и выведите следующие данные о введенном покемоне:

     • Имя

     • Тип

     • Вес

     • Рост

     • Способности

Используйте PokéAPI (https://pokeapi.co/), который предоставляет информацию о покемонах, их характеристиках, типах и другую информацию.
"""

import requests

def get_pokemon_list():
    url = "https://pokeapi.co/api/v2/pokemon?limit=20"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        return [pokemon['name'] for pokemon in data['results']]
    else:
        print("Ошибка при получении списка покемонов.")
        return []

def get_pokemon_info(pokemon_name):
    url = f"https://pokeapi.co/api/v2/pokemon/{pokemon_name}"
    response = requests.get(url)
    if response.status_code == 200:
        return response.json()
    else:
        print("Ошибка при получении информации о покемоне.")
        return None

def main():
    pokemon_list = get_pokemon_list()
    print("Список первых 20 покемонов:")
    for pokemon in pokemon_list:
        print(pokemon)

    pokemon_name = input("\nВведите имя покемона: ").strip().lower()

    pokemon_info = get_pokemon_info(pokemon_name)

    if pokemon_info:
        name = pokemon_info['name']
        types = [t['type']['name'] for t in pokemon_info['types']]
        weight = pokemon_info['weight']
        height = pokemon_info['height']
        abilities = [a['ability']['name'] for a in pokemon_info['abilities']]

        print(f"\nИмя: {name.capitalize()}")
        print(f"Типы: {', '.join(types).capitalize()}")
        print(f"Вес: {weight}")
        print(f"Рост: {height}")
        print(f"Способности: {', '.join(abilities).capitalize()}")

if __name__ == "__main__":
    main()

"""## Задание 3. HTTP-запросы, ответы и посты

**Описание:**

Создайте программу, которая будет взаимодействовать с JSONPlaceholder API, реализуя следующие функции:

1. Реализуйте функцию, которая выполняет GET-запрос к https://jsonplaceholder.typicode.com/posts и возвращает список постов в формате JSON

2. Реализуйте функцию, котороая получает вводимое ID поста, выполняет GET-запрос по ID и возвращает данные поста в формате JSON

3. Реализуйте функцию, которая выполняет обработку JSON из пункта 2 и выводит всю важную информацию в консоль
"""

pip install requests

import requests

def get_posts():
    response = requests.get("https://jsonplaceholder.typicode.com/posts")
    if response.status_code == 200:
        return response.json()
    return None

def get_post_by_id(post_id):
    response = requests.get(f"https://jsonplaceholder.typicode.com/posts/{post_id}")
    if response.status_code == 200:
        return response.json()
    return None

def display_post_info(post):
    if post:
        print(f"ID: {post['id']}")
        print(f"Title: {post['title']}")
        print(f"Body: {post['body']}")
        print(f"User ID: {post['userId']}")
    else:
        print("Post not found")

posts = get_posts()
print(f"Total posts: {len(posts)}")

post_id = int(input("Enter post ID to retrieve: "))
post = get_post_by_id(post_id)
display_post_info(post)

"""## Задание 4. HTTP-запросы, ответы и работа с постами

**Описание**

Создайте программу, которая будет взаимодействовать с JSONPlaceholder API (из предыдущего задания), реализуя новые функции:

1. Реализуйте функцию, которая принимает заголовок, содержимое и ID пользователя (информация вводится с помощью input()), выполняет POST-запрос для создания нового поста и возвращает информацию о созданном посте в формате JSON


```
Заголовок: Новый пост
Содержимое поста: Тут должно находиться содержимое нового поста...
ID пользователя: 10
```



2. Реализуйте функцию, которая принимает ID поста, новый заголовок и новое содержимое, выполняет PUT-запрос и возвращает обновлённый пост в формате JSON

3. Реализуйте функцию, которая принимает ID поста, выполняет DELETE-запрос и возвращает статус-код ответа
"""

import requests

def create_post(title, body, user_id):
    url = "https://jsonplaceholder.typicode.com/posts"
    post_data = {
        "title": title,
        "body": body,
        "userId": user_id
    }
    response = requests.post(url, json=post_data)
    if response.status_code == 201:
        return response.json()
    return None

def update_post(post_id, new_title, new_body):
    url = f"https://jsonplaceholder.typicode.com/posts/{post_id}"
    updated_data = {
        "title": new_title,
        "body": new_body
    }
    response = requests.put(url, json=updated_data)
    if response.status_code == 200:
        return response.json()
    return None

def delete_post(post_id):
    url = f"https://jsonplaceholder.typicode.com/posts/{post_id}"
    response = requests.delete(url)
    return response.status_code

title = input("Введите заголовок: ")
body = input("Введите содержимое поста: ")
user_id = int(input("Введите ID пользователя: "))

new_post = create_post(title, body, user_id)
print("Созданный пост:", new_post)

post_id = int(input("Введите ID поста для обновления: "))
new_title = input("Введите новый заголовок: ")
new_body = input("Введите новое содержимое: ")

updated_post = update_post(post_id, new_title, new_body)
print("Обновленный пост:", updated_post)

post_id_to_delete = int(input("Введите ID поста для удаления: "))
status_code = delete_post(post_id_to_delete)
print("Статус-код удаления:", status_code)

"""## Задание 5. HTTP-запросы, ответы и пёсики

**Описание**

Создайте программу, которая будет взаимодействовать с Dog API, которая позволит получать список пород собак, вводить несколько пород и получать их фотогрфии.

Этапы:

1. Создайте функцию, которая использует метод GET и возвращает список всех пород собак в формате нумерованного списка

2. Реализуйте возможность ввода нескольких пород собак через запятую


```
african, chow, dingo
```



3. Создание функции, которая реализует запрос, возвращает и выводит изображениия собак, породы которых были введены до этого


Используйте Dog API (https://dog.ceo/dog-api/), который предоставляет информацию о породах собак и их изображения.

*Подсказка*



```
import requests
from PIL import Image
from IPython.display import display
import io

url = <____>
response = <____>
        
if response.<______> == <___>:
      image_url = response.json()['message']

res = requests.<__>(image_url)
img = Image.open(io.BytesIO(res.content))
display(img)
```
"""

pip install Pillow

import requests
from PIL import Image
from IPython.display import display
import io

def get_breeds():
    url = "https://dog.ceo/api/breeds/list/all"
    response = requests.get(url)
    if response.status_code == 200:
        breeds = response.json()['message']
        return breeds
    return None

def display_breeds(breeds):
    print("Список пород собак:")
    for i, breed in enumerate(breeds, start=1):
        print(f"{i}. {breed}")

def get_images_by_breeds(selected_breeds):
    for breed in selected_breeds:
        url = f"https://dog.ceo/api/breed/{breed}/images/random"
        response = requests.get(url)
        if response.status_code == 200:
            image_url = response.json()['message']
            res = requests.get(image_url)
            img = Image.open(io.BytesIO(res.content))
            display(img)
        else:
            print(f"Не удалось получить изображение для породы: {breed}")


breeds = get_breeds()
if breeds:
    display_breeds(breeds)
    user_input = input("Введите породы собак через запятую: ")
    selected_breeds = [breed.strip() for breed in user_input.split(',')]
    get_images_by_breeds(selected_breeds)
else:
    print("Не удалось получить список пород собак.")