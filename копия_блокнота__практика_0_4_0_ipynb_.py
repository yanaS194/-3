# -*- coding: utf-8 -*-
"""Копия блокнота "Практика 0.4.0.ipynb"

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ne12sdEatO8XuTF9ek05xsbj4p1kbGMp

Введите ваше ФИО:
"""

Смирнова Яна Александровна

"""***Дисклеймер***

В данной практике запрещено использования функций:


*   sum()
*   min()
*   max()
*   average()
*   reversed()
*   sorted()
*   готовые функции или библиотеки

# **Задача 1:**

Интернет-магазин предлагает следующие условия скидок:

*   Для заказов больше 1000 единиц, клиент получает скидку 5%. Если клиент использует промокод SUPERDISCOUNT, он получает скидку 10% (вместо 5%).
*  Для заказов более 5000 единиц, клиент получает скидку 15%, а использование промокода SUPERDISCOUNT увеличивает скидку до 20% (вместо 15%).

Этап 1:
Ввод:
```
Введите стоимость единицы товара: 5
Введите количество товара: 1001
Введите промокод: GiVEMEDISCONT
```

Вывод:

```
Ваша скидка: 5%
Итоговая сумма: 4754.75
```
Этап 2:

Оформите ваш код в виде функции
"""

def calculate_discount(unit_price, quantity, promo_code):
    total_price = unit_price * quantity
    discount = 0

    if quantity > 5000:
        discount = 15
        if promo_code == "SUPERDISCOUNT":
            discount = 20
    elif quantity > 1000:
        discount = 5
        if promo_code == "SUPERDISCOUNT":
            discount = 10

    discount_amount = (discount / 100) * total_price
    final_price = total_price - discount_amount

    print(f"Ваша скидка: {discount}%")
    print(f"Итоговая сумма: {final_price:.2f}")

unit_price = float(input("Введите стоимость единицы товара: "))
quantity = int(input("Введите количество товара: "))
promo_code = input("Введите промокод: ")

calculate_discount(unit_price, quantity, promo_code)

"""# **Задача 2:**

Этап 1:
Напишите программу способную отфильтровать список и вывести только положительные элементы


Ввод:
```
-1 5 1 2 -3
```

Вывод:

```
5 1 2
```

Этап 2:

Оформите ваш код в виде функции
"""

def filter_positive_numbers(numbers):
    positive_numbers = []
    for number in numbers:
        if number > 0:
            positive_numbers.append(number)
    return positive_numbers

input_numbers = input("Введите числа через пробел: ")
numbers_list = [int(num) for num in input_numbers.split()]
filtered_numbers = filter_positive_numbers(numbers_list)

for num in filtered_numbers:
    print(num, end=' ')

"""# **Задача 3:**

Этап 1:
Напишите программу реализующую Алгоритм Евклида


> Алгоритм Евклида – это алгоритм нахождения наибольшего общего делителя (НОД) пары целых чисел.



Ввод:
```
30 18
```

Вывод:

```
6
```

Этап 2:
Оформите ваш код в виде функции
"""

def euclidean_algorithm(a, b):
    while b != 0:
        a, b = b, a % b
    return a

input_numbers = input("Введите два целых числа через пробел: ")
numbers = input_numbers.split()
a = int(numbers[0])
b = int(numbers[1])

gcd = euclidean_algorithm(a, b)
print(gcd)

"""# **Задача 4:**

Этап 1:
Напишите функцию программу, которая принимает строку и возвращает список слов и количество их упомнинаний в предложении

Этап 2:
Оформите ваш код в виде функции

Ввод:
```
apple banana apple
```

Вывод:

```
apple: 2,
banana: 1
```
"""

def count_word_occurrences(sentence):
    words = sentence.split()
    word_count = {}

    for word in words:
        if word in word_count:
            word_count[word] += 1
        else:
            word_count[word] = 1

    return word_count

input_sentence = input("Введите строку: ")
result = count_word_occurrences(input_sentence)

for word, count in result.items():
    print(f"{word}: {count}")

"""# **Задача 5:**

Этап 1:
Детектор анаграмм Напишите программу на Python, которая принимает в качестве входных данных две строки и проверяет, являются ли они анаграммами друг друга

Этап 2:
Оформите ваш код в виде функции

Ввод:
```
listen, silent
```

Вывод:

```
True
```
"""

def are_anagrams(str1, str2):
    if len(str1) != len(str2):
        return False

    count = {}

    for char in str1:
        if char in count:
            count[char] += 1
        else:
            count[char] = 1

    for char in str2:
        if char in count:
            count[char] -= 1
        else:
            return False

    for value in count.values():
        if value != 0:
            return False

    return True

input_strings = input("Введите две строки, разделенные запятой: ")
str1, str2 = input_strings.split(', ')
result = are_anagrams(str1, str2)

print(result)

"""# **Задача 6:**

Шифр ​​Цезаря

Напишите программу на Python, которая реализует шифр Цезаря, простой метод шифрования, который заменяет каждую букву буквой на фиксированное количество позиций вниз по алфавиту. Программа должна запрашивать у пользователя сообщение и значение сдвига, а затем шифровать и расшифровывать сообщение.

Этап 1:

Напишите код для реализации данной задачи

Этап 2:

Оформите код в виде нескольких функций:

* Зашифровывает сообщение
* Расшифровывает сообщение
"""

def encrypt(message, shift):
    encrypted_message = ""
    for char in message:
        if char.isalpha():
            shift_base = ord('A') if char.isupper() else ord('a')
            encrypted_char = chr((ord(char) - shift_base + shift) % 26 + shift_base)
            encrypted_message += encrypted_char
        else:
            encrypted_message += char
    return encrypted_message

def decrypt(encrypted_message, shift):
    decrypted_message = ""
    for char in encrypted_message:
        if char.isalpha():
            shift_base = ord('A') if char.isupper() else ord('a')
            decrypted_char = chr((ord(char) - shift_base - shift) % 26 + shift_base)
            decrypted_message += decrypted_char
        else:
            decrypted_message += char
    return decrypted_message

def main():
    message = input("Введите сообщение для шифрования: ")
    shift = int(input("Введите значение сдвига: "))

    encrypted = encrypt(message, shift)
    print("Зашифрованное сообщение:", encrypted)

    decrypted = decrypt(encrypted, shift)
    print("Расшифрованное сообщение:", decrypted)

if __name__ == "__main__":
    main()

"""# **Задача 7**

Задача: «Банковская система»

Создайте программу Python, которая имитирует базовую банковскую систему. Система должна иметь следующие функции:

Требования
*   Система должна позволять клиентам создавать счета и хранить их балансы.
*   Система должна позволять клиентам вносить и снимать деньги со своих счетов.
*   Система должна позволять клиентам проверять свой текущий баланс.
*   Система должна позволять клиентам переводить деньги между счетами.
*   Система должна отслеживать транзакции (депозиты, снятия и переводы) и иметь возможность печатать детали транзакций.


Задачи
1. Реализуйте банковскую систему, используя только базовые конструкции Python, такие как def, lists, if, elif и else, без классов или словарей.
Определите функции для создания счетов, внесения и снятия денег, получения балансов счетов, перевода денег между счетами, а также создания и печати транзакций.
2. Напишите основную функцию, которая демонстрирует использование банковской системы путем создания счетов, внесения и снятия денег и перевода денег между счетами.
3. Бонусное задание
Реализуйте способ хранения и печати истории транзакций для каждого счета.

Ограничения
Не используйте классы или словари.
Используйте только базовые конструкции Python, такие как def, lists, if, elif и else.
"""

accounts = []
transactions = []

def create_account(initial_balance):
    if initial_balance < 0:
        print("Начальный баланс не может быть отрицательным.")
        return None
    account_id = len(accounts)
    accounts.append(initial_balance)
    transactions.append([])
    return account_id

def deposit(account_id, amount):
    if account_id < 0 or account_id >= len(accounts):
        print("Некорректный идентификатор счета.")
        return
    if amount <= 0:
        print("Сумма депозита должна быть положительной.")
        return
    accounts[account_id] += amount
    transactions[account_id].append(f"Депозит: {amount}")

def withdraw(account_id, amount):
    if account_id < 0 or account_id >= len(accounts):
        print("Некорректный идентификатор счета.")
        return
    if amount <= 0:
        print("Сумма снятия должна быть положительной.")
        return
    if accounts[account_id] < amount:
        print("Недостаточно средств на счете.")
        return
    accounts[account_id] -= amount
    transactions[account_id].append(f"Снятие: {amount}")

def check_balance(account_id):
    if account_id < 0 or account_id >= len(accounts):
        print("Некорректный идентификатор счета.")
        return None
    return accounts[account_id]

def transfer(from_account_id, to_account_id, amount):
    if from_account_id < 0 or from_account_id >= len(accounts) or to_account_id < 0 or to_account_id >= len(accounts):
        print("Некорректный идентификатор счета.")
        return
    if amount <= 0:
        print("Сумма перевода должна быть положительной.")
        return
    if accounts[from_account_id] < amount:
        print("Недостаточно средств для перевода.")
        return
    accounts[from_account_id] -= amount
    accounts[to_account_id] += amount
    transactions[from_account_id].append(f"Перевод: {amount} на счет {to_account_id}")
    transactions[to_account_id].append(f"Перевод: {amount} от счета {from_account_id}")

def print_transactions(account_id):
    if account_id < 0 or account_id >= len(accounts):
        print("Некорректный идентификатор счета.")
        return
    print(f"История транзакций для счета {account_id}:")
    for transaction in transactions[account_id]:
        print(transaction)

def main():
    account1 = create_account(100)
    account2 = create_account(200)

    deposit(account1, 50)
    withdraw(account1, 30)
    transfer(account1, account2, 20)

    print("Баланс счета 1:", check_balance(account1))
    print("Баланс счета 2:", check_balance(account2))

    print_transactions(account1)
    print_transactions(account2)

if __name__ == "__main__":
    main()