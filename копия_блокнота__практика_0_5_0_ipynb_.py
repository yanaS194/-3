# -*- coding: utf-8 -*-
"""Копия блокнота "Практика 0.5.0.ipynb"

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aCW3bhw2tvHRFctzVnOrYLOXNoHSeaGF

ФИО:
"""

Смирнова Яна Александровна

"""# **Задание 1**

Дан словарь, содержащий имена и возраст людей, напишите программу выводящую возраст человека по имени

Дано:

```
{"Alice": 25, "Bob": 30, "Charlie": 35}
```

Вввод:


```
Alice
```

Вывод:


```
Alice 25
```
"""

my_dict ={"Alice": 25, "Bob": 30, "Charlie": 35}
name = input ()
print (name + " " + str(my_dict[name]))

"""# **Задание 2**

Дан список, состоящий из целых чисел, необходимо написать функцию считающую сумму всех положительных четных чисел списка

Ввод:

```
1, 2, 3, 4, 5, 6, 7, 8, 9
```

Вывод:


```
20
```

***Запрещено:***

*   Использование готовых функций для суммирования чисел
"""

a = int (input ())
b = int (input ())
c = int (input ())
d = int (input ())
e = int (input ())
f = int (input ())
i = int (input ())
g = int (input ())
l = int (input ())
suma = b + d + f + g
print (suma)

"""# **Задание 3**

Дан словарь, содержащий название фрукта и его цвет, выведите список всех желтых фруктов


Дано:

```
fruits_and_colors = {
    "apple": "red",
    "banana": "yellow",
    "mango": "yellow",
    "orange": "orange",
    "lemon": "yellow",
    "grape": "purple"
}
```

Вывод:


```
Yellow fruits:
banana
lemon
mango
```
"""

fruits_and_colors = {
    "apple": "red",
    "banana": "yellow",
    "mango": "yellow",
    "orange": "orange",
    "lemon": "yellow",
    "grape": "purple"
}
# chvet = input ()
# if chvet == fruits_and_colors.get("yellow"):
#     print(chvet + " " + str(fruits_and_colors))

for k,v in fruits_and_colors.items():
  if v == "yellow":
    print (k)

"""# **Задание 4**

Дан словарь, необходимо написать функцию меняющую ключ и значение местами

Дано:


```
{"a": 1, "b": 2, "c": 3}
```

Вывод:

```
{1: 'a', 2: 'b', 3: 'c'}
```
"""

my_dict = {"a": 1, "b": 2, "c": 3}
for k,v in my_dict.items():
    print (v,k)

"""# **Задание 5**

Дан список слов, неограниченной длинны, сформируйте словарь, где в качестве ключа будет слово, а в качестве значения количество символов

**Критерии**


*   Словарь необходимо отсортировать по убыванию количества элементов в списке.
*   Подсчет элементов должен быть реализован в отдельной функции
*   Сортировка пары `ключ:значение` должна быть реализована также в виде отдельной функции




Дано:
```
['apple','banana','orange','apple','apple','banana']
```


Вывод:
```
{'apple':3, 'banana': 2, 'orange': 1}
```

***Запрещено:***

*   Использование готовых функций для сортировки
*   Использование готовых функций для подсчета элементов
"""

def count_elements(words):
    word_count = []
    for word in words:
        found = False
        for i in range(len(word_count)):
            if word_count[i][0] == word:
                word_count[i][1] += 1
                found = True
                break
        if not found:
            word_count.append([word, 1])
    return word_count

def sort_dict(word_count):
    sorted_count = []
    while word_count:
        max_index = 0
        for i in range(1, len(word_count)):
            if word_count[i][1] > word_count[max_index][1]:
                max_index = i
        sorted_count.append(word_count[max_index])
        word_count.pop(max_index)
    return sorted_count

def main():
    words = ['apple', 'banana', 'orange', 'apple', 'apple', 'banana']
    word_count = count_elements(words)
    sorted_word_count = sort_dict(word_count)

    result = {}
    for item in sorted_word_count:
        result[item[0]] = item[1]

    print(result)

if __name__ == "__main__":
    main()

"""# **Задание 6**

Дан словарь, содержащий информацию о людях, необходимо:



*   Вывести всех людей старше 30 лет
*   Вывести список городов и количество людей из словаря проживающих в них
*   Вывести список профессий и список людей для каждой профессии

**Критерии**

Каждый из пунктов необходимо реализовать в виде функции
"""

people_info = {
    "Alice": {"age": 25, "city": "New York", "occupation": "Engineer"},
    "Bob": {"age": 30, "city": "Los Angeles", "occupation": "Designer"},
    "Charlie": {"age": 35, "city": "Chicago", "occupation": "Teacher"},
    "Diana": {"age": 28, "city": "Miami", "occupation": "Doctor"},
    "Ethan": {"age": 40, "city": "Seattle", "occupation": "Chef"},
    "Frank": {"age": 32, "city": "Atlanta", "occupation": "Lawyer"},
    "Gabriella": {"age": 29, "city": "San Francisco", "occupation": "Software Engineer"},
    "Harrison": {"age": 38, "city": "Denver", "occupation": "Architect"},
    "Isabella": {"age": 26, "city": "Washington D.C.", "occupation": "Journalist"},
    "Julian": {"age": 42, "city": "Miami", "occupation": "Musician"},
    "Kate": {"age": 31, "city": "Philadelphia", "occupation": "Nurse"},
    "Lucas": {"age": 36, "city": "Nashville", "occupation": "Businessman"},
    "Mia": {"age": 27, "city": "Atlanta", "occupation": "Artist"},
    "Natalie": {"age": 39, "city": "Portland", "occupation": "Writer"},
    "Oliver": {"age": 44, "city": "Minneapolis", "occupation": "Professor"},
    "Penelope": {"age": 33, "city": "San Diego", "occupation": "Marketing Manager"},
    "Quincy": {"age": 41, "city": "Nashville", "occupation": "Singer"},
    "Rachel": {"age": 34, "city": "Cleveland", "occupation": "Teacher"},
    "Sophia": {"age": 29, "city": "Nashville", "occupation": "Engineer"},
    "Tessa": {"age": 37, "city": "Miami", "occupation": "Lawyer"}
}

def people_over_30(people):
    print("Люди старше 30 лет:")
    for name, info in people.items():
        if info["age"] > 30:
            print(name)

def people_by_city(people):
    city_count = []
    for info in people.values():
        found = False
        for city in city_count:
            if city[0] == info["city"]:
                city[1] += 1
                found = True
                break
        if not found:
            city_count.append([info["city"], 1])

    print("\nКоличество людей по городам:")
    for city in city_count:
        print(f"{city[0]}: {city[1]}")

def people_by_occupation(people):
    occupation_list = []
    for name, info in people.items():
        found = False
        for occupation in occupation_list:
            if occupation[0] == info["occupation"]:
                occupation[1].append(name)
                found = True
                break
        if not found:
            occupation_list.append([info["occupation"], [name]])

    print("\nСписок профессий и людей:")
    for occupation in occupation_list:
        print(f"{occupation[0]}: {', '.join(occupation[1])}")

def main():
    people_over_30(people_info)
    people_by_city(people_info)
    people_by_occupation(people_info)

if __name__ == "__main__":
    main()



"""# **Задание 7**

Задание: Разработка системы отзывов о предметах

Описание: Создать программу на Python для хранения и управления отзывами о предметах учебного курса. Программа должна позволять пользователям добавлять, просматривать и удалять отзывы, а также вычислять средний балл по заданному предмету.

**Функционал:**

*   Добавление отзыва и оценки:
   *   Пользователь может ввести название предмета, оценку (от 1 до 5) и текст отзыва.
   *   Отзывы должны храниться в структуре данных (например, словаре), где ключом будет название предмета, а значением - список отзывов (каждый отзыв может хранить оценку и комментарий).
*   Просмотр отзывов и оценок:
   *   Пользователь может запросить отзывы для указанного предмета.
   *   Если для указанного предмета есть отзывы, программа должна отобразить список всех отзывов и соответствующих оценок.
*   Удаление отзыва:
   *   Пользователь может удалить отзыв по индексу. Необходимо заранее уведомить пользователя о том, какие отзывы доступны для удаления.
   *   Программа должна обработать ситуацию, когда индекс введен неправильно.
*   Вычисление среднего балла по предмету:
   *   Пользователь может ввести название предмета, и программа должна вычислить и вывести средний балл по всем отзывам для этого предмета.
   *   Если отзывов нет, программа должна сообщить об этом.


**Критерии:**

*   Код должен быть оформлен в виде функций
*   Необходимо обрабатывать неправильный ввод пользователя
*   Должны быть комментарии к функциям
*   Присутсвует весь дополнительный функционал



**Опционально:**

Предлагаю вам добавить свои критерии оценки или вопросы, на которые должен ответить студент, чтобы оценить пару
"""

[artwork for
   artwork in artworks
      if artist_name.lower() in artwork['artist_title'].lower()]