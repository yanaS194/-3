# -*- coding: utf-8 -*-
"""Копия блокнота "Практика 0.3.0.ipynb"

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1v7DPIcAiDnVSvd-ziLH6p9uSEogsT_fE

ФИО
"""

Смирнова Яна Александровна

"""**Во всей практике нельзя применять библиотеки предоставляющие готовые решения!**

# **Задача 1.**

Типы данных Напишите программу на Python, которая принимает список чисел в качестве входных данных от пользователя, а затем выводит сумму, среднее значение и максимальное значение из списка.

***Нельзя использовать: len(), min(), max(), average(), sum()***

Дано:
```
1 2 3 4 5 6 7
```
Вывод:

```
Сумма чисел: 28
Среднее арифм.: 4.0
Максимальное значение: 7
```
"""

print ("введите числа:")
c1 = int (input())
c2 = int (input())
c3 = int (input())
c4 = int (input())
c5 = int (input())
c6 = int (input())
c7 = int (input())
suma = c1 + c2 + c3 + c4 + c5 + c6 + c7
sreda = suma / 7
mak = c7
print ("Сумма чисел:")
print (suma)
print ("Среднее ариф.:")
print (sreda)
print ("Максимальное значение:")
print (mak)

"""# **Задача 2.**

Напишите программу на Python, которая принимает список слов в качестве входных данных от пользователя, а затем распечатывает список в обратном порядке.

Ввод:

```
апельсин мандарин яблоко
```

Вывод:

```
яблоко мандарин апельсин
```
"""

print ("Введите слова:")
s1 = input ()
s2 = input ()
s3 = input ()
print ("Вывод")
print (s3,s2,s1)

"""# **Задача 3**

Простой чат-бот
Создайте простого чат-бота, который отвечает на основные запросы пользователей. Программа должна использовать условные выражения для определения намерений пользователя и последующего соответствующего ответа.

Чат бот может:

- помогать складывать числа
- подсказывать фильм, музыку и тд (из заранее созданного списка)
- создавать список дел (а также выводить его, обновлять, очищать)

Интерфейс чат-бота на ваше усмотрение, это могут быть как заранее определенные команды, так и к примеру вызов команды по номеру

*Реализовать без использования функций*

Пример:

Ввод:

```
Олег, какую мызыку посоветуешь?
```

Вывод:

```
Я бы посоветовал вам: Led Zeppelin Stairway to Heaven
```
"""

print ("ОЛЕГ")
print ("Фукнции Олега: 1. сложить числа; 2. подсказать музыку; 3. создать список дел")
c1 = int (input ())
if c1 == 1:
  print ("Введите числа:")
  chis1 = int (input())
  chis2 = int (input())
  suma = chis1 + chis2
  print ("Сумма чисел равна:")
  print (suma)
elif c1 == 3:
  print ("введите что вам надо сделать")
  delo1 = input ()
  delo2 = input ()
  delo3 = input ()
  delo4 = input ()
  cpisok = delo1, delo2, delo3, delo4
  print ("вот ваши дела")
  print (cpisok)
  print ("изменить порядок? 4 - ДА, 5 - нееет")
  p1 =  int (input ())
elif p1 == 4:
 print ("что вы хотите сделать в первую очередь?")
 de1 = input ()
 print ("во вторую очередь?")
 de2 = input ()
 print ("в третью очередь?")
 de3 = input ()
 print ("что должно быть последним?")
 de4 = input ()
 novispisok = de1, de2, de3, de4
 print ("вот ваш новый список!")
 print (novispisok)
elif p1 == 5:
  print ("вот ваши дела")
  print (cpisok)
else: c1 == 2
print ("Посоветую песню: 1. любимая песня олега; 2. если скучно; 3. если весело")
myz = int (input ())
if myz == 1:
   print ("моя любимая песня артур пирожков - парадайз")
elif myz == 2:
   print ("я бы посоветовал вам: 10 часов тишины")
elif myz == 3:
   print ("я бы посоветовал вам: артур пирожков - парадайз")
else: myz == 0
print ("Фукнции Олега: 1. сложить числа; 2. подсказать музыку; 3. создать список дел")

"""# **Задача 4.**

Камень, ножницы, бумага

Создайте игру в Камень, ножницы, бумагу, в которой пользователь может играть против компьютера. Программа должна запросить выбор пользователя, а затем сгенерировать выбор компьютера. Затем программа должна определить победителя на основе правил игры.

**Этап 1:**

Определение победителя

**Этап 2:**
  
Игра до 3 побед


Ввод для "Этап 1":

```
Камень
```

Вывод:

```
Компьютер: Ножницы
Игрок: Камень
Победа: Игрок
```
"""

import random
user_action = input("Сделайте выбор — камень, ножницы или бумага: ")
possible_actions = ["камень", "бумага", "ножницы"]
computer_action = random.choice(possible_actions)
print(f"\nВы выбрали {user_action}, компьютер выбрал {computer_action}.\n")
if user_action == computer_action:
    print(f"Оба пользователя выбрали {user_action}. Ничья!!")
elif user_action == "камень":
    if computer_action == "ножницы":
        print("Камень бьет ножницы! Вы победили!")
    else:
        print("Бумага оборачивает камень! Вы проиграли.")
elif user_action == "бумага":
    if computer_action == "камень":
        print("Бумага оборачивает камень! Вы победили!")
    else:
        print("Ножницы режут бумагу! Вы проиграли.")
elif user_action == "ножницы":
    if computer_action == "бумага":
        print("Ножницы режут бумагу! Вы победили!")
    else:
        print("Камень бьет ножницы! Вы проиграли.")

"""# **Задача 6.**

Создайте игру "Палач" или "Виселица", в которой пользователь должен угадать слово, предлагая буквы. Программа должна выбрать случайное слово, а затем разрешить пользователю угадывать буквы. После каждого угадывания программа должна сообщать пользователю, есть ли в слове буква или нет.

**Этап 1**
Создать саму игру

**Этап 2:**
Ввести подсчет количества очков и ограничения на попытки

**Этап 3:** Добавить возможность сразу угадать слово
"""

from random import choice

HANGMAN = (
    """
     ------
     |    |
     |
     |
     |
     |
     |
    ----------
    """,
    """
     ------
     |    |
     |    O
     |
     |
     |
     |
    ----------
    """,
    """
     ------
     |    |
     |    O
     |    |
     |
     |
     |
    ----------
    """,
    """
     ------
     |    |
     |    O
     |   /|
     |
     |
     |
    ----------
    """,
    """
     ------
     |    |
     |    O
     |   /|\\
     |
     |
     |
    ----------
    """,
    """
     ------
     |    |
     |    O
     |   /|\\
     |   /
     |
     |
    ----------
    """,
    """
     ------
     |    |
     |    O
     |   /|\\
     |   / \\
     |
     |
    ----------
    """
)

max_wrong = len(HANGMAN) - 1
WORDS = ("python", "игра", "программирование")  # Слова для угадывания

word = choice(WORDS)  # Слово, которое нужно угадать
so_far = "_" * len(word)  # Одна черточка для каждой буквы в слове, которое нужно угадать
wrong = 0  # Количество неверных предположений, сделанных игроком
used = []  # Буквы уже угаданы

while wrong < max_wrong and so_far != word:
    print(HANGMAN[wrong])  # Вывод висельника по индексу
    print("\nВы использовали следующие буквы:\n", used)
    print("\nНа данный момент слово выглядит так:\n", so_far)

    guess = input("\n\nВведите свое предположение: ")  # Пользователь вводит предполагаемую букву

    while guess in used:
        print("Вы уже вводили букву", guess)  # Если буква уже вводилась ранее, то выводим соответствующее сообщение
        guess = input("Введите свое предположение: ")  # Пользователь вводит предполагаемую букву

    used.append(guess)  # В список использованных букв добавляется введённая буква

    if guess in word:  # Если введённая буква есть в загаданном слове, то выводим соответствующее сообщение
        print("\nДа!", guess, "есть в слове!")
        new = ""
        for i in range(len(word)):  # В цикле добавляем найденную букву в нужное место
            if guess == word[i]:
                new += guess
            else:
                new += so_far[i]
        so_far = new

    else:
        print("\nИзвините, буквы \"" + guess + "\" нет в слове.")  # Если буквы нет, то выводим соответствующее сообщение
        wrong += 1

if wrong == max_wrong:  # Если игрок превысил кол-во ошибок, то его повесили
    print(HANGMAN[wrong])
    print("\nТебя повесили!")
else:  # Если кол-во ошибок не превышено, то игрок выиграл
    print("\nВы угадали слово!")

print("\nЗагаданное слово было \"" + word + '\"')

"""# **Дополнительно: Задача 7.**

**Цифра на определенном месте:**

Последовательно записан натуральный ряд чисел.

Какая цифра стоит в N позиции


Вввод:

```
Введите номер позиции: 1234567890
```

Вывод:

```
8
```
"""

n = int(input())
a, t = [0] * (n // 2), n % 2
for _ in range(n):
  i, v = map(int, input().split())
  if i % 2 == t: a[i // 2] = v
print(*a)