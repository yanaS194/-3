# -*- coding: utf-8 -*-
"""Копия блокнота "Практика 0.9.0.ipynb"

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HOkuxWGOpgTR1To4AIVhnZlizUhw3UqB

ФИО
"""

Смирнова Яна Александровна

"""# Дисклеймер

В данной практике вам необходимо применить все ваши знания по темам:

- Функции
- Словари
- Списки
- Множества
- Условные конструкции
- Запросы

и все что было изучено на прошлых практических занятиях

В каждом задании кратко описаны функции, которые необходимо реализовать, детали реализации вы должны продумать самостоятельно

# Задание 0

Создайте функцию по нахождению уникальных элементов из двух списков



```
a = [1, 2, 3, 4]
b = [3, 4, 5, 6]
```
"""

def find_unique_elements(list_a, list_b):
    set_a = set(list_a)
    set_b = set(list_b)
    unique_in_a = set_a - set_b
    unique_in_b = set_b - set_a
    unique_elements = unique_in_a.union(unique_in_b)
    return list(unique_elements)
a = [1, 2, 3, 4]
b = [3, 4, 5, 6]
unique_elements = find_unique_elements(a, b)

print("Уникальные элементы из двух списков:", unique_elements)

"""# Задание 1

Симулятор виртуального питомца

Цель: создать виртуальный симулятор домашних животных, в котором пользователи смогут заводить питомцев и ухаживать за ними.

Требования:

- Функция для усыновления питомца (имя, тип, возраст).
- Функция для того, чтобы покормить питомца, поиграть с ним или уложить его спать.
- Функция для отображения состояния питомца (голод, радость, энергия).
"""

def create_pet(name, pet_type, age):
    return {
        "name": name,
        "type": pet_type,
        "age": age,
        "hunger": 50,
        "happiness": 50,
        "energy": 50
    }
def feed(pet):
    if pet["hunger"] < 100:
        pet["hunger"] += 20
        pet["happiness"] += 5
        print(f"{pet['name']} покормлен. Уровень голода: {pet['hunger']}")
    else:
        print(f"{pet['name']} уже сыт!")
def play(pet):
    if pet["energy"] >= 10:
        pet["energy"] -= 10
        pet["happiness"] += 15
        pet["hunger"] -= 5
        print(f"{pet['name']} поиграл. Уровень счастья: {pet['happiness']}, уровень голода: {pet['hunger']}, уровень энергии: {pet['energy']}")
    else:
        print(f"{pet['name']} слишком устал для игры!")
def sleep(pet):
    pet["energy"] = 100
    print(f"{pet['name']} поспал и восстановил энергию. Уровень энергии: {pet['energy']}")
def display_status(pet):
    return {
        "name": pet["name"],
        "type": pet["type"],
        "age": pet["age"],
        "hunger": pet["hunger"],
        "happiness": pet["happiness"],
        "energy": pet["energy"]
    }
def adopt_pet(pets):
    name = input("Введите имя вашего питомца: ")
    pet_type = input("Введите тип питомца (например, кот, собака): ")
    age = int(input("Введите возраст питомца: "))
    new_pet = create_pet(name, pet_type, age)
    pets[name] = new_pet
    print(f"Питомец {name} успешно усыновлен!")
def display_all_pets(pets):
    if not pets:
        print("У вас нет питомцев.")
        return
    print("\nВаши питомцы:")
    for pet in pets.values():
        status = display_status(pet)
        print(f"{status['name']} - Тип: {status['type']}, Возраст: {status['age']} лет, "
              f"Голод: {status['hunger']}, Радость: {status['happiness']}, Энергия: {status['energy']}")
def main():
    pets = {}
    while True:
        print("\nМеню:")
        print("1. Усыновить питомца")
        print("2. Показать всех питомцев")
        print("3. Ухаживать за питомцем")
        print("4. Выход")
        choice = input("Ваш выбор: ")
        if choice == '1':
            adopt_pet(pets)
        elif choice == '2':
            display_all_pets(pets)
        elif choice == '3':
            pet_name = input("Введите имя питомца, за которым хотите ухаживать: ")
            if pet_name in pets:
                pet = pets[pet_name]
                action = input("Выберите действие (1 - покормить, 2 - поиграть, 3 - уложить спать): ")
                if action == '1':
                    feed(pet)
                elif action == '2':
                    play(pet)
                elif action == '3':
                    sleep(pet)
                else:
                    print("Неверный выбор.")
            else:
                print(f"Питомец с именем {pet_name} не найден.")
        elif choice == '4':
            print("Спасибо за игру! До свидания!")
            break
        else:
            print("Неверный выбор. Пожалуйста, попробуйте снова.")
if __name__ == "__main__":
    main()

"""# Задание 2

Рыцарь и дракон

Цель: создать небольшую игру, в которой вам необходимо играть за рыцаря и сразиться с драконом

Требования:

- Создание персонажа (имя, информация о доспехах, оружии, урон, здоровье)
- Управление персонажем и мини сюжет
- Создание дракона (Имя, информация о здоровье и уроне)
- Боевая система (нанесение и получение урона, урон должен быть случайным в заданном диапазоне)
- Реализовать бой между драконом и рыцарем
"""

import random

def create_character(name, armor, weapon, damage_range, health):
    return {
        "name": name,
        "armor": armor,
        "weapon": weapon,
        "damage_range": damage_range,
        "health": health
    }
def attack(character):
    damage = random.randint(character["damage_range"][0], character["damage_range"][1])
    print(f"{character['name']} атакует с оружием {character['weapon']} и наносит {damage} урона!")
    return damage
def take_damage(character, damage):
    effective_damage = max(0, damage - character["armor"])
    character["health"] -= effective_damage
    print(f"{character['name']} получил {effective_damage} урона и теперь имеет {character['health']} здоровья.")
def is_alive(character):
    return character["health"] > 0
def battle(knight, dragon):
    print(f"{knight['name']} встречает {dragon['name']} на поле боя!\n")
    while is_alive(knight) and is_alive(dragon):
        damage_to_dragon = attack(knight)
        take_damage(dragon, damage_to_dragon)
        if not is_alive(dragon):
            print(f"{dragon['name']} повержен! {knight['name']} победил!")
            break
        damage_to_knight = attack(dragon)
        take_damage(knight, damage_to_knight)
        if not is_alive(knight):
            print(f"{knight['name']} повержен! {dragon['name']} победил!")
            break
def main():
    print("Добро пожаловать в игру 'Рыцарь и Дракон'!")
    knight_name = input("Введите имя вашего рыцаря: ")
    knight = create_character(knight_name, armor=5, weapon="меч", damage_range=(5, 15), health=100)
    dragon_name = input("Введите имя дракона: ")
    dragon = create_character(dragon_name, armor=3, weapon="огненное дыхание", damage_range=(10, 20), health=80)

    print(f"\n{knight['name']} сражается с {dragon['name']}!\n")
    battle(knight, dragon)
if __name__ == "__main__":
    main()

"""# Задание 3

Цель - создать менеджера команды Pokémon, который позволит пользователям:

- Добавлять покемонов в свою команду. (если такого покемона еще нет в команде)
- Удалять покемонов из их команды.
- Просматривать подробную информацию обо всех покемонах в команде.
- Находить покемона по имени.
- Устраивать тренировочный бой между двумя покемонами

Для данной задачи используйте: https://pokeapi.co/
"""

pip install requests

import requests

def create_pokemon(name, base_experience, health, types):
    return {
        "name": name,
        "base_experience": base_experience,
        "health": health,
        "types": types
    }
def pokemon_to_string(pokemon):
    return f"{pokemon['name'].capitalize()} (Типы: {', '.join(pokemon['types'])}, Здоровье: {pokemon['health']}, Базовый опыт: {pokemon['base_experience']})"
def add_pokemon(team, pokemon):
    if pokemon not in team:
        team.append(pokemon)
        print(f"{pokemon['name'].capitalize()} добавлен в вашу команду!")
    else:
        print(f"{pokemon['name'].capitalize()} уже в вашей команде!")
def remove_pokemon(team, name):
    for pokemon in team:
        if pokemon['name'] == name.lower():
            team.remove(pokemon)
            print(f"{pokemon['name'].capitalize()} удален из вашей команды!")
            return
    print(f"Покемон с именем {name} не найден в вашей команде.")
def show_team(team):
    if not team:
        print("Ваша команда пуста.")
    else:
        print("Ваша команда покемонов:")
        for pokemon in team:
            print(pokemon_to_string(pokemon))
def find_pokemon(team, name):
    for pokemon in team:
        if pokemon['name'] == name.lower():
            print(f"Найден покемон: {pokemon_to_string(pokemon)}")
            return
    print(f"Покемон с именем {name} не найден в вашей команде.")
def battle(team, pokemon1_name, pokemon2_name):
    pokemon1 = get_pokemon_by_name(team, pokemon1_name)
    pokemon2 = get_pokemon_by_name(team, pokemon2_name)
    if pokemon1 and pokemon2:
        print(f"Начинается бой между {pokemon1['name'].capitalize()} и {pokemon2['name'].capitalize()}!")
        winner = pokemon1 if pokemon1['base_experience'] > pokemon2['base_experience'] else pokemon2
        print(f"Победитель: {winner['name'].capitalize()}!")
def get_pokemon_by_name(team, name):
    for pokemon in team:
        if pokemon['name'] == name.lower():
            return pokemon
    return None
def fetch_pokemon_data(name):
    url = f"https://pokeapi.co/api/v2/pokemon/{name.lower()}"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        name = data['name']
        base_experience = data['base_experience']
        health = data['stats'][0]['base_stat']  # HP
        types = [type_info['type']['name'] for type_info in data['types']]
        return create_pokemon(name, base_experience, health, types)
    else:
        print(f"Ошибка: покемон с именем '{name}' не найден.")
        return None
def main():
    team = []
    while True:
        print("\n1. Добавить покемона в команду")
        print("2. Удалить покемона из команды")
        print("3. Показать команду")
        print("4. Найти покемона по имени")
        print("5. Устроить бой между покемонами")
        print("6. Выйти")
        choice = input("Выберите действие: ")
        if choice == "1":
            name = input("Введите имя покемона: ")
            pokemon = fetch_pokemon_data(name)
            if pokemon:
                add_pokemon(team, pokemon)
        elif choice == "2":
            name = input("Введите имя покемона для удаления: ")
            remove_pokemon(team, name)
        elif choice == "3":
            show_team(team)
        elif choice == "4":
            name = input("Введите имя покемона для поиска: ")
            find_pokemon(team, name)
        elif choice == "5":
            pokemon1_name = input("Введите имя первого покемона: ")
            pokemon2_name = input("Введите имя второго покемона: ")
            battle(team, pokemon1_name, pokemon2_name)
        elif choice == "6":
            print("Вы вышли из менеджера команды Pokémon.")
            break
        else:
            print("Неизвестный выбор. Пожалуйста, выберите снова.")
if __name__ == "__main__":
    main()